# make an image smaller from a source file.
# outputs to bazel-bin/small_jakecoffee.png
# genrule(
#     name = "logo_miniature",
#     srcs = ["jakecoffee.png"],
#     outs = ["small_jake.png"],
#     cmd = "convert $< -resize 100x100 $@",
# )

# load "miniature" from the root project and then create a target named
# "logo_miniature" which we can build. 
# outputs to bazel-bin/small_jakecoffee.png
load("@af_rules_ruby//:miniature.bzl", "miniature")
miniature(
  name = "logo_miniature",
  src = "jakecoffee.png"
)



load("@af_rules_ruby//:bundle.bzl", "bundle_test")

bundle_test(
  name = "bundle",
  srcs = ["Gemfile", "Gemfile.lock"]
)

load("@af_rules_ruby//:bundle.bzl", "bundle_compile")

bundle_compile(
  name = "bundle_i",
  srcs = ["Gemfile", "Gemfile.lock"]
)

# af_ruby_bundle(
#   name = "bundle",
#   path = "."
# )
# genrule(
#     name = "show_genrule_variables",
#     srcs = [
#         "@bundle"
#     ],
#     outs = [
#         "subdir/show_genrule_variables1.out",
#     ],
#     cmd = """cat <<EOF > $(execpath subdir/show_genrule_variables1.out)
# SRCS: $(SRCS)
# OUTS: $(OUTS)
# RULEDIR: $(RULEDIR)
# @D (prefer RULEDIR to this): $(@D)
#  * Because this genrule has multiple outputs, @D is the same as RULEDIR.
# EOF
# touch $(execpath subdir/show_genrule_variables2.out)
# """,
# )




